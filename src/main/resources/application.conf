akka {

  extensions = [
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$",
    "akka.cluster.metrics.ClusterMetricsExtension",
    "akka.cluster.pubsub.DistributedPubSub"]

  actor {

    provider = "akka.cluster.ClusterActorRefProvider"

    default-mailbox {
      mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    kryo  {
      type = "nograph"
      idstrategy = "automatic"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      implicit-registration-logging = false
      kryo-trace = false
      mappings {
        "com.actorbase.actorsystem.messages.MainMessages.MainMessage" = 20,
        "com.actorbase.actorsystem.messages.ClientActorMessages.MapResponse" = 21,
        "com.actorbase.actorsystem.messages.AuthActorMessages.AuthActorMessages" = 22,
        "com.actorbase.actorsystem.messages.StorefinderMessages.StorefinderMessage" = 24,
        "com.actorbase.actorsystem.messages.StorekeeperMessages.StorekeeperMessage" = 25,
        "com.actorbase.actorsystem.messages.WarehousemanMessages.WarehousemanMessage" = 26,
        "com.actorbase.actorsystem.actors.manager.Manager$OneMore$" = 27,
        "com.actorbase.actorsystem.messages.StorefinderMessages.UpdateCollectionSize" = 28,
        "com.actorbase.actorsystem.messages.MainMessages.CreateCollection" = 29,
        "com.actorbase.actorsystem.messages.MainMessages.InsertTo" = 30,
        "com.actorbase.actorsystem.messages.MainMessages.CompleteTransaction" = 31,
        "com.actorbase.actorsystem.messages.StorefinderMessages.PartialMapTransaction" = 32,
        "com.actorbase.actorsystem.messages.StorekeeperMessages.GetAll" = 33,
        "com.actorbase.actorsystem.messages.StorekeeperMessages.GetItem" = 34,
        "com.actorbase.actorsystem.messages.StorekeeperMessages.InsertItem" = 35,
        "com.actorbase.actorsystem.messages.StorekeeperMessages.RemoveItem" = 36,
        "com.actorbase.actorsystem.messages.AuthActorMessages.Authenticate" = 37,
        "com.actorbase.actorsystem.messages.AuthActorMessages.AddCredentials" = 38,
        "com.actorbase.actorsystem.messages.AuthActorMessages.RemoveCredentials" = 39,
        "com.actorbase.actorsystem.messages.AuthActorMessages.UpdateCredentials" = 40,
        "com.actorbase.actorsystem.messages.MainMessages.AddContributor" = 41,
        "com.actorbase.actorsystem.messages.MainMessages.RemoveContributor" = 42
      }

      classes = [
        "com.actorbase.actorsystem.messages.MainMessages.MainMessage",
        "com.actorbase.actorsystem.messages.ClientActorMessages.MapResponse",
        "com.actorbase.actorsystem.messages.AuthActorMessages.AuthActorMessages",
        "com.actorbase.actorsystem.messages.StorefinderMessages.StorefinderMessage",
        "com.actorbase.actorsystem.messages.StorekeeperMessages.StorekeeperMessage",
        "com.actorbase.actorsystem.messages.WarehousemanMessages.WarehousemanMessage",
        "com.actorbase.actorsystem.actors.manager.Manager$OneMore$",
        "com.actorbase.actorsystem.messages.StorefinderMessages.UpdateCollectionSize",
        "com.actorbase.actorsystem.messages.MainMessages.CreateCollection",
        "com.actorbase.actorsystem.messages.MainMessages.InsertTo",
        "com.actorbase.actorsystem.messages.MainMessages.CompleteTransaction",
        "com.actorbase.actorsystem.messages.StorefinderMessages.PartialMapTransaction",
        "com.actorbase.actorsystem.messages.StorekeeperMessages.GetAll",
        "com.actorbase.actorsystem.messages.StorekeeperMessages.GetItem",
        "com.actorbase.actorsystem.messages.StorekeeperMessages.InsertItem",
        "com.actorbase.actorsystem.messages.StorekeeperMessages.RemoveItem",
        "com.actorbase.actorsystem.messages.AuthActorMessages.Authenticate",
        "com.actorbase.actorsystem.messages.AuthActorMessages.AddCredentials",
        "com.actorbase.actorsystem.messages.AuthActorMessages.RemoveCredentials",
        "com.actorbase.actorsystem.messages.AuthActorMessages.UpdateCredentials",
        "com.actorbase.actorsystem.messages.MainMessages.AddContributor",
        "com.actorbase.actorsystem.messages.MainMessages.RemoveContributor"
      ]
    }

    serializers {
      // java = "akka.serialization.JavaSerializer"
      // proto = "akka.remote.serialization.ProtobufSerializer"
      // akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      // "akka.cluster.ClusterMessage" = akka-cluster
      // "java.lang.String" = java
      "com.actorbase.actorsystem.messages.MainMessages.CreateCollection" = kryo
      "com.actorbase.actorsystem.messages.MainMessages.InsertTo" = kryo
      "com.actorbase.actorsystem.messages.MainMessages.CompleteTransaction" = kryo
      "com.actorbase.actorsystem.messages.MainMessages.GetFrom" = kryo
      "com.actorbase.actorsystem.messages.StorefinderMessages.PartialMapTransaction" = kryo
      "com.actorbase.actorsystem.messages.StorefinderMessages.UpdateCollectionSize" = kryo
      "com.actorbase.actorsystem.messages.StorekeeperMessages.GetAll" = kryo
      "com.actorbase.actorsystem.messages.StorekeeperMessages.GetItem" = kryo
      "com.actorbase.actorsystem.messages.StorekeeperMessages.InsertItem" = kryo
      "com.actorbase.actorsystem.messages.StorekeeperMessages.RemoveItem" = kryo
      "com.actorbase.actorsystem.messages.ClientActorMessages.MapResponse" = kryo
      "com.actorbase.actorsystem.messages.AuthActorMessages.AuthActorMessages" = kryo
      "com.actorbase.actorsystem.messages.MainMessages.MainMessage" = kryo
      "com.actorbase.actorsystem.messages.StorefinderMessages.StorefinderMessage" = kryo
      "com.actorbase.actorsystem.messages.StorekeeperMessages.StorekeeperMessage" = kryo
      "com.actorbase.actorsystem.messages.WarehousemanMessages.WarehousemanMessage" = kryo
      "com.actorbase.actorsystem.actors.manager.Manager$OneMore$" = kryo,
      "com.actorbase.actorsystem.messages.StorefinderMessages.UpdateCollectionSize" = kryo,
      "com.actorbase.actorsystem.messages.AuthActorMessages.Authenticate" = kryo,
      "com.actorbase.actorsystem.messages.AuthActorMessages.AddCredentials" = kryo,
      "com.actorbase.actorsystem.messages.AuthActorMessages.RemoveCredentials" = kryo,
      "com.actorbase.actorsystem.messages.AuthActorMessages.UpdateCredentials" = kryo,
      "com.actorbase.actorsystem.messages.MainMessages.AddContributor" = kryo,
      "com.actorbase.actorsystem.messages.MainMessages.RemoveContributor" = kryo
    }
  }

  loglevel = "INFO"

  cluster {
    auto-down-unreachable-after = off
    roles = [master]
    roles = ${?ROLES}
    // min-nr-of-members = 3
    // role {
    //   master.min-nr-of-members = 1
    //   worker.min-nr-of-members = 2
    // }

    seed-nodes = [
      "akka.tcp://"${name}"@127.0.0.1:2500"]
    // "akka.tcp://"${name}"@192.168.1.107:2501"]

    sharding {
      //     role = "master"
      remember-entities = on
    }

    failure-detector {
      threshold = 12.0
      acceptable-heartbeat-pause = 25s
      heartbeat-interval = 5s
      heartbeat-request {
        expected-response-after = 20s
      }
    }
  }

  remote {
    log-remote-lifecycle-events = off
    maximum-payload-bytes = 100000000 bytes
    maximum-payload-bytes = ${?MAXIMUM_PAYLOAD_BYTES}

    netty.tcp {
      log-remote-lifecycle-events = off
      hostname = "127.0.0.1"
      port = ${seed-port}

      message-frame-size =  100000000b
      # message-fram-size = ${?MAXIMUM_PAYLOAD_BYTES}b

      send-buffer-size =  100000000b
      # send-buffer-size = ${?MAXIMUM_PAYLOAD_BYTES}b

      receive-buffer-size =  100000000b
      # receive-buffer-size =  ${?MAXIMUM_PAYLOAD_BYTES}b

      maximum-frame-size = 100000000b
      # maximum-frame-size =  ${?MAXIMUM_PAYLOAD_BYTES}b
    }

    transport-failure-detector {
      heartbeat-interval = 30 s
      acceptable-heartbeat-pause = 12 s
    }
  }
}

spray {
  io {
    read-buffer-size="4kspspray.io.tcp.keep-alive=1"
  }
  can {
    server {
      ssl-encryption = off
    }
  }
}

ssl {
  certificate-file = "cert/actorbase.com.jks"
  certificate-password = "vhjMYi9NRV"
}

akka.cluster.metrics.enabled=off
akka.persistence.journal.plugin = "akka.persistence.journal.inmem"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
// akka.log-dead-letters=on

akka.contrib.cluster.sharding {
  # role = "master"
}

storekeepers {
  role = ""
  max-instances = 100000
  instances-per-node = 10
  size = 256
}

persistence {
  save-folder = "actorbasedata/"
  encryption-key = "Dummy implicit k"
}

name = actorbase
name = ${?NAME}

listen-on = "127.0.0.1"
listen-on = ${?LISTEN_ON}

exposed-port = 9999
exposed-port = ${?EXPOSED_PORT}

seed-port = 2500
seed-port = ${?SEED_PORT}
