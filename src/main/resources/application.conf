akka {

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    deployment {
      /storekeepers {
        router = consistent-hashing-pool
        cluster {
          enabled = on
          max-nr-of-instances-per-node = 20
          allow-local-routees = on
        }
      }
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
    }

    # serializers {
    #   akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
    #   # akka-cluster = "akka.serialization.JavaSerializer"
    # }

    serialization-bindings {
      "akka.cluster.ClusterMessage" = akka-cluster
      "java.lang.String" = java
      "com.actorbase.actorsystem.storefinder.Storefinder" = java
      "com.actorbase.actorsystem.storekeeper.Storekeeper" = java
    }
  }

  loglevel = "INFO"

  cluster {
    seed-nodes = [
      "akka.tcp://"${name}"@"${listen-on}":2500",
      "akka.tcp://"${name}"@"${listen-on}":2501"]
  }

  remote {
    maximum-payload-bytes = 1000000 bytes
    netty.tcp {
      log-remote-lifecycle-events = off
      hostname = ${listen-on}
      port = ${clustering-port}
      message-frame-size =  1000000b
      send-buffer-size =  1000000b
      receive-buffer-size =  1000000b
      maximum-frame-size = 1000000b
    }
  }
}

control-aware-dispatcher {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

spray {
  can {
    server {
      ssl-encryption = on
    }
  }
}

akka.cluster.metrics.enabled=off
akka.persistence.journal.plugin = "akka.persistence.journal.inmem"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.log-dead-letters=off

name = actorbase

listen-on = "127.0.0.1"

clustering-port = 2500

exposed-port = 9999
